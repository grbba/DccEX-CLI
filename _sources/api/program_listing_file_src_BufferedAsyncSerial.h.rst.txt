
.. _program_listing_file_src_BufferedAsyncSerial.h:

Program Listing for File BufferedAsyncSerial.h
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_BufferedAsyncSerial.h>` (``src/BufferedAsyncSerial.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* 
    * File:   BufferedAsyncSerial.h
    * Author: Terraneo Federico
    * Distributed under the Boost Software License, Version 1.0.
    * Created on January 6, 2011, 3:31 PM
    */
   
   #include "AsyncSerial.h"
   #include <mutex>
   
   #ifndef BUFFEREDASYNCSERIAL_H
   #define BUFFEREDASYNCSERIAL_H
   
   class BufferedAsyncSerial: public AsyncSerial
   {
   public:
       BufferedAsyncSerial();
   
       BufferedAsyncSerial(const std::string& devname, unsigned int baud_rate,
           boost::asio::serial_port_base::parity opt_parity=
               boost::asio::serial_port_base::parity(
                   boost::asio::serial_port_base::parity::none),
           boost::asio::serial_port_base::character_size opt_csize=
               boost::asio::serial_port_base::character_size(8),
           boost::asio::serial_port_base::flow_control opt_flow=
               boost::asio::serial_port_base::flow_control(
                   boost::asio::serial_port_base::flow_control::none),
           boost::asio::serial_port_base::stop_bits opt_stop=
               boost::asio::serial_port_base::stop_bits(
                   boost::asio::serial_port_base::stop_bits::one));
   
       size_t read(char *data, size_t size);
   
       std::vector<char> read();
   
       std::string readString();
   
       std::string readStringUntil(const std::string delim="\n");
   
       virtual ~BufferedAsyncSerial();
   
   private:
   
       void readCallback(const char *data, size_t len);
   
       static std::vector<char>::iterator findStringInVector(std::vector<char>& v,
               const std::string& s);
   
       std::vector<char> readQueue;
       std::mutex readQueueMutex;
   };
   
   #endif //BUFFEREDASYNCSERIAL_H
