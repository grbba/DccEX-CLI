
.. _program_listing_file_src_ShellCmdExec.hpp:

Program Listing for File ShellCmdExec.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_ShellCmdExec.hpp>` (``src/ShellCmdExec.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Â© 2021 Gregor Baues. All rights reserved.
    *
    * This is free software: you can redistribute it and/or modify it under
    * the terms of the GNU General Public License as published by the
    * Free Software Foundation, either version 3 of the License, or
    * (at your option) any later version.
    *
    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    * DEALINGS IN THE SOFTWARE.
    *
    * See the GNU General Public License for more details
    * <https://www.gnu.org/licenses/>
    */
   
   #ifndef ShellCmdExec_h
   #define ShellCmdExec_h
   
   #include <map>
   #include <string>
   #include <exception>
   #include "DccShellCmd.hpp"
   #include "ShellCmdConfig.hpp"
   
   typedef void _fShellCmd(std::ostream &, std::shared_ptr<cmdItem>, std::vector<std::string>);
   typedef void (*_fpShellCmd)(std::ostream &, std::shared_ptr<cmdItem>, std::vector<std::string>);
   
   class ShellCmdExec
   {
   private:
       static std::map<std::pair<int, std::string>, _fpShellCmd> _fMap;
       static void init();
   
   public:
       static void add(int menuID, std::string name, _fpShellCmd cmdFunction)
       {
           _fMap.insert({{menuID, name}, cmdFunction});
       }
   
       static std::map<std::pair<int, std::string>, _fpShellCmd> *getFMap()
       {
           return &_fMap;
       }
   
       static void setup();
   
       ShellCmdExec() = default;
       ~ShellCmdExec() = default;
   };
   
   
   class ShellCmdExecException : public std::exception
   {
   private:
       bool msg = false;
       const std::string cmd;
   
   public:
   
       const char * what () const throw ()
       {
           if(msg) {
               return cmd.c_str();
           }
           return "DCC cli command execution exception";
       }
   
       ShellCmdExecException(const std::string c): msg(true), cmd(c) {};
       ShellCmdExecException() = default;
       ~ShellCmdExecException() = default;
   };
   
   #endif
